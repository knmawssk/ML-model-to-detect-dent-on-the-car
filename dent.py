# -*- coding: utf-8 -*-
"""dent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/102iv7mBAab6KYrRBvTf_TbhFq7Huvkej
"""

!pip install ultralytics roboflow albumentations tqdm pyyaml

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="")
project = rf.workspace("fall-on7ds").project("dent-car-xpswt")
version = project.version(2)
dataset = version.download("yolov8", location='dentcardataset')

!mv //content/dentcardataset/valid /content/dentcardataset/val

!python /content/pipeline.py \
  --mode full \
  --data-source local \
  --dataset-dir /content/dentcardataset \
  --augmented-dir /content/dentcardatasetRESULT \
  --num-aug 2 \
  --model-path yolov8s.pt \
  --epochs 10 \
  --batch-size 4 \
  --class-names damage \
  --device 0

!pip install ultralytics opencv-python

from ultralytics import YOLO
from collections import Counter
from IPython.display import Image, display
import cv2
import os

# Load your trained model
model = YOLO('/content/results/train/weights/best.pt')

# Path to an image you want to test
image_path = '/content/Снимок экрана 2025-09-14 в 14.49.35.png'  # replace with real image path

# Run prediction
results = model.predict(source=image_path, conf=0.3)

# Get detected class indices
classes = results[0].boxes.cls.tolist()
counts = Counter(classes)

# Class indices based on dataset.yaml
damage_count = counts.get(0, 0)

# --- Draw bounding boxes ---
img = cv2.imread(image_path)

for box, cls in zip(results[0].boxes.xyxy, results[0].boxes.cls):
    x1, y1, x2, y2 = map(int, box)
    if int(cls) == 0:
        color = (0, 0, 255)  # красный
        label = "damage"
    else:
        continue
    cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
    cv2.putText(img, label, (x1, y1 - 5),
                cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

# Save and show image
cv2.imwrite("predicted_people.jpg", img)
display(Image(filename="predicted_people.jpg"))

# Decide based on detection
if damage_count > 0:
    print("The car has damage!")
else:
    print("The car does not have damage")

!pip install ultralytics opencv-python

from ultralytics import YOLO
from collections import Counter
from IPython.display import Image, display
import cv2
import os

# Загружаем модель
model = YOLO('/content/results/train/weights/best.pt')

# Папка с изображениями (должны быть JPG/PNG)
image_folder = '/content/dent-or-clean-1/test/images'

# Папка для сохранения результатов
output_folder = '/content/damagedcarsonlyresults'
os.makedirs(output_folder, exist_ok=True)

# Список для показа примеров
saved_images = []

# Проходим по всем изображениям
for filename in os.listdir(image_folder):
    if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
        image_path = os.path.join(image_folder, filename)
        results = model.predict(source=image_path, conf=0.3, verbose=False)

        # Подсчёт классов
        classes = results[0].boxes.cls.tolist()
        counts = Counter(classes)

        damage_count = counts.get(0, 0)

        # Загружаем изображение
        img = cv2.imread(image_path)

        # Рисуем боксы
        for box, cls in zip(results[0].boxes.xyxy, results[0].boxes.cls):
            x1, y1, x2, y2 = map(int, box)
            if int(cls) == 0:  # damage
                color = (0, 0, 255)
                label = "damage"
            else:
                continue

            cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
            cv2.putText(img, label, (x1, y1 - 5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Сохраняем картинку
        save_path = os.path.join(output_folder, filename)
        cv2.imwrite(save_path, img)

        # Логируем результат
        if damage_count > 0:
            print(f"{filename}: 🚨 The car is DAMAGED!")
        else:
            print(f"{filename}: ✅ The car is CLEAN")

        saved_images.append(save_path)

# Покажем первые 3 картинки в ноутбуке
for img_path in saved_images[:3]:
    display(Image(filename=img_path))

from ultralytics import YOLO
import pandas as pd
import os
model = YOLO('/content/results/train2/weights/best.pt')
metrics = model.val(split='val')

# Print the metrics
print("Evaluation Metrics:")
print(f"  Precision: {metrics.box.mp}")
print(f"  Recall: {metrics.box.mr}")
print(f"  mAP50: {metrics.box.map50}")
print(f"  mAP50-95: {metrics.box.map}")

!zip -r /content/damagedcarsonlyresults.zip /content/damagedcarsonlyresults

